<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pctrLogoSudoku.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        /BeSfX8u8K6HBQAAAABJRU5ErkJggg==
</value>
  </data>
</root>